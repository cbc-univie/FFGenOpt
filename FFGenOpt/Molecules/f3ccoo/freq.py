# This script was generated by OpenMM-Setup on 2021-07-22.

import sys
from simtk.openmm import *
from simtk.openmm.app import *
from simtk.unit import *
import parmed
from normalmodeanalysis import NormalModeAnalysis

# Input Files

psf = CharmmPsfFile('f3coo_omm.psf')
crd = CharmmCrdFile('f3coo_init.crd')

paramsfile = 'ff.str'
parFiles = ()
for line in open(paramsfile, 'r'):
    if '!' in line: line = line.split('!')[0]
    parfile = line.strip()
    if len(parfile) != 0: parFiles += ( parfile, )

params = CharmmParameterSet( *parFiles )

#params = CharmmParameterSet('toppar_drude_master_protein_2019g_orig.str',
#                            'toppar_drude_model_2019g.str',
#                            'f3coo_all_d.str',
#                            )

# System Configuration

nonbondedCutoff = 100.*nanometers
constraints = None
constraintTolerance = 0.000001

# Integration Options

# parmed xml

parmed_prm = parmed.charmm.CharmmParameterSet( *parFiles )
pmff = parmed.openmm.parameters.OpenMMParameterSet.from_parameterset(parmed_prm,
    unique_atom_types = True)
pmff.write('parmed_omm.xml', separate_ljforce = True, charmm_imp = True)
quit()
                                                                     
dt = 0.001*picoseconds
temperature = 300*kelvin
friction = 1.0/picosecond
pressure = 1.0*atmospheres

# Simulation Options

platform = Platform.getPlatformByName('CPU')

topology = psf.topology
positions = crd.positions
system = psf.createSystem(params, nonbondedCutoff=nonbondedCutoff,
    constraints=constraints)
integrator = NoseHooverIntegrator(temperature, friction, dt)
integrator.setConstraintTolerance(constraintTolerance)
simulation = Simulation(topology, system, integrator, platform)
simulation.context.setPositions(positions)

#checkpointReporter = CheckpointReporter('checkpoint.chk', 10000)


# Prepare the Simulation

print('Building system...')
simulation.minimizeEnergy()

nma = NormalModeAnalysis(topology, system, integrator, positions, CPUOnly=True)
nma.CPUPreMinimization()
nma.CPUMinimizationCycle()
nma.CalculateNormalModes()
print(nma.VibrationalSpectrum)
print(nma.TransRotFreq)
#print(nma.NormalModes[6:])
#colors = ["black",]*9
#nma.PlotVibrationalSpectrum(colorStr=colors)

